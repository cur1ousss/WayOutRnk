    #include<iostream>
    using namespace std;
    typedef unsigned long long int ulli;
    /**
     * WIF not assume each digit as unique and count only single possibiliteis of a number
     */
    /*
    *************************IMPORTANT******************************
    *Lesson Learned >>      look out for numbers conatining zero in between them
    */


    int main(){

    cout<<"\n\n";
    int noofcases;
    cin>>noofcases;

    ulli numbers[noofcases];

    for(int i=0;i<noofcases;i++){
    cin>>numbers[i];

    }

    cout<<"\n all inputted elements are ";
    for(int i=0;i<noofcases;i++){
        cout<<numbers[i]<<"\t";


    //major loop
    for(int mjr=0;mjr<noofcases;mjr++){

    int count=0;
    ulli cpy=numbers[mjr];
    int digits=0;

    if(cpy==0){
        digits=1;
    }
    else{
        while(cpy!=0){
            digits++;
            cpy/=10;
            }

    }   
    cout<<"\n number of digits in number "<<numbers[mjr]<<" are "<<digits;


    cpy=numbers[mjr];
    cout<<"\n refresged number is "<<cpy;


    int alldigits[digits];
        for(int tmp=0;tmp<digits;tmp++){
            alldigits[tmp]=cpy%10;
            cpy/=10;
        }


    cout<<"\n priting all individual  digits >>>>>>>>   ";
        for(int x=0;x<digits;x++){
            cout<<alldigits[x]<<" ";
        }
    cout<<"\n after all digits in array put ";

    cout<<"\n vlaue of major outer "<<mjr;

    cout<<"\n priting all individual  digits >>>>>>>>   ";
        for(int x=0;x<digits;x++){
            cout<<alldigits[x]<<" ";
            cout<<"\n value of x in loop "<<x;
        }
    cout<<"\n vlaue of major outer "<<mjr;
    cpy=numbers[mjr];
    cout<<"\n refreshed cpy "<<cpy;


    //CORE DUMPED TMP

        //check loop
            for(int k=0;k<digits;k++){
            
                if(cpy==0){
                    cout<<"\n number is zero";
                }
            if(alldigits[k]!=0 && cpy%alldigits[k]==0){
                count++;
                cout<<"\n entered non zero loop";
                }

            }

    cout<<"\n pritning count ";
    cout<<count<<endl;
    digits=0;
    count=0;

    }

    cout<<"\nENDING  FINAL\n\n";

        return 0;
        }
    }



    /**
     *STRANGE ERROR
    cpy=numbers[mjr];
    cout<<"\n refreshed cpy "<<cpy; //below code floatingpoint error [x/0 or x%0]
                        //does not allow excute immediate above line of code WHY????

    //CORE DUMPED TMP

        //check loop
            for(int k=0;k<digits;k++){
            
                if(numbers[mjr]==0){
                    cout<<"\n digits is zero";
                }
            if(numbers[mjr]!=0 && numbers[mjr]%alldigits[k]==0){
                count++;
                cout<<"\n entered non zero loop";
                }

            }
    * 
    * 
    * 
    */

    /**
     *  STRANGE ERROR 2
     *Error (stderr)
    Reading symbols from Solution...done.
    [New LWP 18256]
    [Thread debugging using libthread_db enabled]
    Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
    Core was generated by `./Solution'.
    Program terminated with signal SIGFPE, Arithmetic exception.
    #0  0x0000000000400b00 in main () at Solution.cpp:44
    44	        if(numbers[mjr]%alldigits[k]==0){
    To enable execution of this file add
        add-auto-load-safe-path /usr/local/lib64/libstdc++.so.6.0.25-gdb.py
    line to your configuration file "//.gdbinit".
    To completely disable this security protection add
        set auto-load safe-path /
    line to your configuration file "//.gdbinit".
    For more information about this security protection see the
    "Auto-loading safe path" section in the GDB manual.  E.g., run from the shell:
        info "(gdb)Auto-loading safe path"
    Input (stdin)
    Download
    2
    12
    1012
    Your Output (stdout)
    2
    Expected Output
    Download
    2
    3 
    */