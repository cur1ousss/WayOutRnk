#include<iostream>
using namespace std;
int main(){

int testcases;
cin>>testcases;
int countlate=0;
int countearly=0;
string resarr[testcases];


for(int i=0;i<testcases;i++){
int numstuds;
cin>>numstuds;
int arrivalTimes[numstuds];
int threshold;
cin>>threshold;
for(int i=0;i<numstuds;i++){
cin>>arrivalTimes[i];
if(arrivalTimes[i]>0){
    countlate++;
}
else if(arrivalTimes[i]<=0){
    countearly++;
}
}
if(countearly>countlate){
resarr[testcases]="YES";
}
else if(countlate>countearly){
resarr[testcases]="NO";
}
countlate=0;
countearly=0;
}

for(int i=0;i<testcases;i++){
    cout<<resarr[i];
}

    return 0;
}

/*

FIRST try

int testcases;
cin>>testcases;
int countlate=0;
int countearly=0;
string resarr[testcases];
for(int i=0;i<testcases;i++){
int numstuds;
cin>>numstuds;
int arrivalTimes[numstuds];
int threshold;
cin>>threshold;
for(int i=0;i<numstuds;i++){
cin>>arrivalTimes[i];
if(arrivalTimes[i]>0){
    countlate++;
}
else if(arrivalTimes[i]>=0){
    countearly++;
}
}
if(countearly>countlate){
resarr[testcases]="YES";
}
else if(countlate>countearly){
resarr[testcases]="NO";
}
countlate=0;
countearly=0;
}

for(int i=0;i<testcases;i++){
    cout<<resarr[i]<<endl;

Segmentation Fault

Error (stderr)

    Reading symbols from Solution...done.
    [New LWP 781916]
    [Thread debugging using libthread_db enabled]
    Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
    Core was generated by `./Solution'.
    Program terminated with signal SIGSEGV, Segmentation fault.
    #0 0x0000000000400dd4 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local (this=0xffffffffffffffe2)
    at Solution.cpp:39
    39 return 0;
    To enable execution of this file add
    add-auto-load-safe-path /usr/local/lib64/libstdc++.so.6.0.25-gdb.py
    line to your configuration file "//.gdbinit".
    To completely disable this security protection add
    set auto-load safe-path /
    line to your configuration file "//.gdbinit".
    For more information about this security protection see the
    "Auto-loading safe path" section in the GDB manual. E.g., run from the shell:
    info "(gdb)Auto-loading safe path"
*/